{#{% if num_modules >= 1 %}#}
{##}
{#{% else %}#}
{#在开始将 C/C++ 项目转译到 Rust 之前，你需要根据 C/C++ 项目信息编写 Rust 的项目的基本信息。#}
{#请根据以下提供的 C/C++ 项目摘要和文件摘要，为迁移到 Rust 的项目生成基本信息，包括以下内容:#}
{##}
{#- 项目名称：项目的名称，使用 snake_case 和 kebab-case 命名法，并尽可能与原始 C/C++ 项目名称保持一致。#}
{#- 项目路径：项目的根目录路径。#}
{#- 项目类型：项目的类型，只能是 lib 或 bin 中的一个。#}
{#- 项目摘要：简要描述项目的主题和核心功能。#}
{#- 项目文件：占位符文件，用于展示项目的基本结构，除必要的 lib.rs 或 main.rs 以及 Cargo.toml 文件外，其他文件为空，无需添加任何内容。#}
{#- C/C++ 模块与 Rust 文件映射：将 C/C++ 项目模块与 Rust 项目文件进行映射，以便于迁移。#}
{##}
{### C/C++ 项目摘要：#}
{#{{ project_description }}#}
{#{% include "partials/files.prompt" %}#}
{##}
{#请你根据以上提供的信息，为迁移到 Rust 的项目生成基本信息。#}
{#{% endif %}#}
在开始将 C/C++ 项目转译到 Rust 之前，你需要根据 C/C++ 项目信息编写 Rust 的项目的基本信息。
请根据以下提供的 C/C++ 项目摘要和文件摘要，为迁移到 Rust 的项目生成基本信息，包括以下内容:

- 项目名称：项目的名称，使用 snake_case 和 kebab-case 命名法，并尽可能与原始 C/C++ 项目名称保持一致。
- 项目路径：项目的根目录路径。
- 项目类型：项目的类型，只能是 lib 或 bin 中的一个。
- 项目摘要：简要描述项目的主题和核心功能。
- 项目文件：占位符文件，用于展示项目的基本结构，除必要的 lib.rs 或 main.rs 以及 Cargo.toml 文件外，其他文件为空，无需添加任何内容。
- C/C++ 模块与 Rust 文件映射：将 C/C++ 项目模块与 Rust 项目文件进行映射，以便于迁移。

## C/C++ 项目摘要：
{{ project_description }}

## C/C++ 项目文件摘要：
{% include "partials/files.prompt" %}

请你根据以上提供的信息，为迁移到 Rust 的项目生成基本信息。

示例：
```json
{
  "type": "lib",
  "name": "arraylist",
  "path": "arraylist",
  "description": "A Rust implementation of the arraylist module, originally written in C/C++.",
  "files": [
    {
      "filepath": "Cargo.toml",
      "text": "[package]\nname = \"arraylist\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]"
    },
    {
      "filepath": "src/lib.rs",
      "text": "pub mod arraylist;"
    },
    {
      "filepath": "src/arraylist.rs",
      "text": ""
    }
  ],
  "file_map": {
    "src/arraylist": ["src/arraylist.rs"]
  }
}
```
