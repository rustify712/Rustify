用户在运行测试用例时出现了运行超时的情况，请你根据提供的被测代码、测试代码和超时前控制台的输出，
分析超时产生的原因，并修改被测代码，避免超时问题。
{% include "partials/files.prompt" %}
## 被测模块:
{% for rust_file in related_rust_files %}
{{rust_file}}
{% endfor %}
## 测试程序: {{ test_filepath }}
## 控制台输出
{{output}}

你应该按照以下步骤进行分析：

### 步骤#1：
**目标**：从控制台输出出发，理解超时产生的原因。
**步骤**：
1. 仔细检查控制台输出中的超时信息，定位测试运行超时的测试函数
2. 分析并详细列出超时测试函数的测试输入、测试逻辑以及预期测试输出

### 步骤#2
**目标**：从测试代码出发，深入分析测试执行过程中的调用链及每一部分的逻辑，定位导致超时的代码段。
**步骤**：
1. 根据测试代码确定被测代码中的被测对象，详细列出相关的被测函数、数据结构、全局变量等
2. 列出测试执行路径，以"a->b"的形式给出
3. 逐个分析测试执行路径上的每一个节点内部的逻辑，并说明该内部逻辑是否可能造成超时（必须对每一个测试路径上节点都给出分析）
4. 基于测试执行路径，跨节点分析整体逻辑，并分析整体执行时哪些节点之间的交互逻辑不当会造成超时现象

### 步骤#3
**目标**：基于第1、2两步的分析，提出问题的解决方案，解决方案必须尽可能详细且具有可行性
**步骤**：
1. 结合被测代码，进一步评价步骤#2中的分析结果，筛选出实际会造成超时问题的代码逻辑
2. 针对每一个会造成超时的问题都提出一套**具体的（修改思路 + 针对具体代码该如何修改，不允许使用优化、改进等说法，必须给出具体的做法）**解决方案

### 步骤#4
**目标**：根据前面的分析，修改代码，解决错误，确保测试通过
**步骤**：
1. 总结解决方案，列出代码中需要修改的部分
2. 修改被测代码，确保符合预期行为，解决超时问题

**请严格遵循以上步骤的指导，详细地输出你的思维过程，不允许遗漏任何一个步骤**

请在最后给出修改后的代码，代码应遵守以下格式:
```rust
// filepath: 修改的文件路径（与用户提供的路径相同，不允许省略前缀）
修改后的全部代码（**要求返回完整的代码，不能只返回修改后的部分代码，不需要行号**）
```
Let's step by step.
