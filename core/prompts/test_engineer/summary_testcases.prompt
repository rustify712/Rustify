用户会为你提供一份针对原C语言代码的测试代码，请你综合考虑对原C语言测试代码的审查结果，从原C语言测试代码中提取测试用例。
## C语言测试代码：
{{c_test_code}}
## 测试代码审查结果
{{review_result}}

请你按照以下步骤分析生成测试用例：
## 步骤#1：
对提供的测试代码进行细致分析，测试函数中提取测试用例的核心要素，包括：
    - 测试输入：测试函数中用于验证功能的输入数据及数据类型。
    - 测试逻辑：整理测试代码的执行流程与测试思路，包括涉及的断言、异常路径及边界条件。
    - 预期测试输出：明确测试函数的预期输出结果，如返回值、状态码、错误信息或其他可验证的输出。

## 步骤#2：
根据已给出的测试代码审查结果，对存在问题的测试逻辑进行必要的修正和完善。这可能包括：
    - 调整不合理的断言条件。
    - 修改错误的期望输出值或状态检查。
对于原 C 测试代码中正确的测试用例，请尽可能与其测试输入、测试逻辑与预期测试输出保持一致。

## 步骤#3 撰写最终的测试用例
在提取和调整基础上，为每个测试用例提供清晰的文档说明。每条测试用例的文档格式应如下：
    ### 测试名称
    ### 测试输入
    ### 测试逻辑
    ### 预期测试输出

**注意**
- 请确保覆盖所有从测试代码中提取的用例，并在内容上与原测试代码的功能意图相匹配。
- 存在问题的测试用例中，应以审查建议为指导，对测试逻辑和期望输出进行适当调整。
Let's step by step.
