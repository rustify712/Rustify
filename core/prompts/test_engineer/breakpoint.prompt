用户在执行某一个 Rust 测试用例出现了测试未通过的情况，
请你根据用户提供的测试代码、被测代码和测试结果，帮助用户分析错误不通过的原因，并给出相应的debug方案。
### 测试函数名称
{{test_case_name}}
### 测试代码
{{rust_test_code}}
### 被测代码
{{rust_code}}
### 测试结果
{{error_info}}

## 你应该按照以下步骤进行：
### 步骤#1：分析测试结果
**目标**：从测试结果出发，理解测试未通过的原因。
**步骤**：
    1.查看错误信息：根据测试框架的输出，查找错误类型（运行时错误或逻辑错误）
        - 如果是运行时错误，请根据输出的报错或堆栈信息，分析错误位置和原因
        - 如果是逻辑错误，请分析预期输出与实际输出之间的区别
    2.检查测试输出：若有详细的打印输出，查看是否有异常数据或意外的中间状态。

### 步骤#2：分析测试代码
**目标**：结合用户提供的测试代码和测试错误信息，分析测试逻辑。
**步骤**：
1.检查测试代码与测试错误信息的对应关系：
    - 如果是运行时错误则确定测试代码中具体出错行
    - 如果是逻辑错误则确定出错的断言语句，确定测试断言比较的内容，并根据上下文分析测试输入、输出和测试逻辑

步骤#3：分析被测代码
**目标**：根据测试代码的分析结果，深入分析被测代码，尤其是与测试失败相关的部分。
**步骤**：
1. 确定被测对象
2. 分析测试用例执行时被测代码中的逻辑调用链，跟踪其中被调用的每个函数，分析每个函数的输入、输出、基本逻辑与异常处理等
3. 分析代码中可能导致测试失败的逻辑错误（如分支判断错误、未处理的异常等）。

步骤#4：制定调试方案
**目标**：制定调试方案，确定断点设置和需要观察的变量信息。
**步骤**：
1. 设置断点位置：
    - 根据测试结果和分析的代码逻辑，选择可能出错的地方设置断点（如输入数据处理、函数返回值、关键变量等）。
    - 如果是循环内部的断点请设置条件断点，主要关注边界或者其他有可能出错的情形，例如break path/to/file.rs:line_number if i == 500
2. 查看变量和堆栈信息：
    - 在断点处分析需要查看的函数输入和输出值，特别是涉及失败的部分。
    - 检查栈帧、局部变量、全局变量及其状态，寻找潜在的异常或不符合预期的值。

请先输出你的分析过程，并在最后输出以下 JSON Schema：
{
    "文件名（tests/测试文件名或者src/被测文件名）": {
        "breakpoints": [
            {
                "breakpoint": "src/被测文件名:断点行号",
                "condition"（断点触发条件，若无条件，则value为""）: "i == xxx"
                "info"（需要查看的变量名）: [
                    "a",
                    "b",
                    ...
                ]
            }，
            {
                "breakpoint": "tests/测试文件名:断点行号"
                ...
            }
            ...
        ]
        ...
    }
    ...
}


