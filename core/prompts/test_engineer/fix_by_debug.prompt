用户在执行测试时出现了测试用例不通过的情况，请你根据提供的测试代码、被测代码、测试结果和测试调试信息，
分析测试不通过的原因，并通过修改被测代码使其能够通过测试。
### 测试函数名称
{{test_case_name}}
## 测试代码
{{rust_test_code}}
## 被测代码
{{rust_code}}
## 测试结果
{{error_info}}
## 调试信息
{{debug_info}}

你应该按照以下步骤进行分析：
### 步骤#1
**目标**：分析实际输出与预期输出的差异，理解该变量在逻辑中的作用，并确定产生差异的潜在原因。
**步骤**：
1. 仔细阅读测试结果并记录具体的错误信息
2. 分析测试代码中预期的输出值和实际输出值，识别差异所在
3. 结合被测代码，理解相关变量的定义和其在程序中的作用，特别是在计算或逻辑判断中的角色
4. 基于测试代码和被测代码，推测差异产生的可能原因，例如输入数据不匹配、边界条件处理错误、类型转换问题等

### 步骤#2
**目标**：从测试代码出发，深入分析测试执行过程中的调用链及每一部分的逻辑。
**步骤**：
1. 分析测试代码的执行流程，确认执行顺序以及调用的函数或模块
2. 追溯到被测代码，查看每个函数、方法或模块的具体实现，特别是与测试失败相关的部分
3. 绘制测试过程中的调用链，确保每个步骤的输入输出与预期一致，标记可能的异常路径或错误逻辑。

### 步骤#3
**目标**：通过调试信息，比较不同断点处的变量值与逻辑值，分析差异并定位问题根源。
**步骤**：
1. 根据调试信息设置多个断点，观察程序执行到不同阶段时的状态
2. 在每个断点处，检查相关变量的值，并与预期的逻辑或测试输出进行对比
3. 确定变量值与逻辑上的差异，分析是哪个环节产生了不一致,理解程序在出错时的执行路径

### 步骤#4
**目标**：根据前面的分析，修改被测代码，解决逻辑错误，确保测试通过。
**步骤**：
1. 汇总前面分析得出的原因，明确代码中需要修改的部分
2. 根据分析结果，修改被测代码中的逻辑或实现，确保符合预期行为

## 输出格式要求
- 先输出你的分析过程
- 再在 Markdown 代码块中编写修改后的被测代码