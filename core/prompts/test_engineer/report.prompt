用户执行了测试用例后得到了测试结果，请根据控制台输出、被测模块代码和测试代码生成一份格式化的测试报告。
{% include "partials/files.prompt" %}
## 被测模块:
{% for rust_file in related_rust_files %}
{{rust_file}}
{% endfor %}
## 测试程序: {{ test_filepath }}
## 控制台输出
{{console_output}}

**如果测试用例编译通过，格式要求如下：**
## 测试通过情况
例如：
| 测试用例名称              | 状态   | 描述                                  |
|---------------------------|--------|---------------------------------------|
| `tests::test_queue_new_free`  | ✅ 成功 | 测试队列的创建与销毁                 |
| `tests::test_queue_push_head` | ✅ 成功 | 测试向队列头部插入数据               |
| `tests::test_queue_pop_head`  | ❌ 失败 | 测试从队列头部弹出数据的功能         |
| `tests::test_queue_peek_tail` | ✅ 成功 | 测试查看队列尾部数据是否正确         |

## 测试失败分析
    ### 失败的测试函数名称
    ### 失败原因分析
        - 提供失败原因，提取错误信息（如断言失败的对比值或 panic 信息）。
        - 指出可能的失败原因并给出建议操作。
## 总结
总结测试的总体情况，评估被测代码的质量，并说明需要人工介入审查

**如果测试用例编译未通过，格式要求如下：**
## 编译错误
编译错误的控制台输出
## 错误测试代码
```rust
测试代码
```
## 编译错误分析
针对控制台的每个编译错误进行分析，提出可能的解决方案