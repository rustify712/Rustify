用户会为你提供由C语言转译而来的 Rust 代码（可能有多个rust文件）和一份测试用例文档，请你根据测试用例文档为rust代码编写测试代码
## Rust 代码：
{% include "partials/files.prompt" %}
## 待测模块名称：
{% for rust_module_name in rust_module_names %}
{{rust_module_name}}
{% endfor %}
## crate名称：
{{crate_name}}
## 测试用例文档
{{test_cases}}

请你遵循以下步骤的指导：
### 步骤1：分析 Rust 代码
    - 分析 Rust 待测代码：解析 Rust 待测代码的关键特性，列出:
        - 核心数据结构：梳理 Rust 中定义的结构体、枚举及其关联的字段或方法。
        - 关键函数：列出需要测试的 Rust 函数，包括其参数类型、返回值类型、泛型及生命周期约束等。
### 步骤2：分析测试用例
    - 理解测试用例文档中的每一个测试用例，包括其测试对象、测试输入、测试逻辑和预期测试输出。
    - 根据此前的审查结果适当调整测试用例，保证测试用例的正确性
    - 分别列出测试用例的测试逻辑，被测对象的预期逻辑，对比说明两者是否一致，如果不一致，请修改测试用例使其符合被测代码的预期逻辑。
    - 确保不遗漏测试用例
### 步骤3：编写测试代码
    - 编写 Rust 测试代码：基于前两步的分析结果，为当前 Rust 代码编写测试程序。

## 注意
- 生成的 Rust 测试代码是针对提供的被测 Rust 代码的，请确保其能够正确调用其中的函数，并能够正确运行
- 在 Rust 测试代码中，一般使用 use 语句引入待测模块。请根据"use::crate名称::待测模块名称::xxx"的格式，正确地使用 use 语句

请在最后返回转译生成 Rust 测试代码块（多个rust被测模块也只生成一个总体的测试代码块），用```rust包裹。
Let's step by step.