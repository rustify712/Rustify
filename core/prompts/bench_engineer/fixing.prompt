用户正在运行一个 Rust 模块的 benchmark 程序, 但程序运行过程中出现错误。
用户将向你提供被测模块的代码, benchmark 程序, 部分项目文件的内容以及相关的错误信息, 请你帮助用户找出错误并解决问题。

{% include "partials/files.prompt" %}

## 被测模块: {{ module_filepath }}
## Benchmark 程序: {{ bench_filepath }}

## 错误信息
{% for error in errors %}
{{ error.rendered }}
{% endfor %}

## 你应该按照以下步骤进行：
### 步骤#1：**分析被测模块代码**
**目标**：仔细阅读用户提供的被测模块代码，充分理解用户提供的代码结构和逻辑。
**步骤**：
- 1. 仔细阅读并理解代码的结构，列举出其主要结构和关键特性，包括但不限于：
    - 模块和命名空间。
    - 函数签名：参数、返回值、生命周期、是否泛型等。
    - 数据结构：结构体、枚举、Trait 等的定义和实现, 以及其属性的类型和生命周期等。
    - 生命周期标注：是否有'a、'static 等生命周期标注，以及其作用范围。
- 2. 识别代码的关键逻辑和上下文，例如：核心功能的实现和任何可能的边界条件。
- 3. 记录这些信息，以便在分析 Benchmark 代码和错误信息时能够更好地理解和分析。
### 步骤#2：**分析 Benchmark 代码**
**目标**详细理解用户提供的 Benchmark 代码，并找出与被测模块代码之间的关联。
**步骤**：
- 1. 逐步分析 Benchmark 代码，理解其结构和逻辑，列出以下关键特征：
    - Benchmark 函数：函数的定义、参数类型及数量、返回值类型等。
    - Benchmark 测试：测试的输入数据、测试逻辑、预期输出等。
    - Benchmark 运行：如何运行 Benchmark 测试，是否存在多线程或异步操作。
- 2. 结合被测模块代码，找出以下可能的问题：
    - 函数调用：是否正确调用了被测模块的函数。
    - 数据传递：是否正确传递了测试数据和参数。
    - 运行逻辑：是否存在逻辑错误或边界条件。
- 3. 明确 Benchmark 代码和被测模块代码的关联和可能的冲突点。
### 步骤#3：**分析错误信息**
**目标**：通过错误信息找出导致 Benchmark 程序运行错误的根本原因。
**步骤**：
- 1. 逐条分析错误信息，包括：
    - 错误的具体位置：代码行号、上下文等。
    - 错误描述：错误信息描述，是否包含类型不匹配、生命周期冲突、Trait 实现错误等问题。
    - 官方文档解释：如果错误信息包含官方文档链接或错误代码，可以参考官方文档了解更多信息。
- 2. 比较错误信息与步骤#1和步骤#2中的分析结果，确定：
    - 是否由于 Benchmark 代码不兼容被测模块代码引起的错误。
    - 是否由于 Benchmark 代码中的独立问题导致的错误。
- 3. 考虑需要修改 Benchmark 代码还是被测模块代码，以解决错误。
### 步骤#4：**修复问题**
**目标**：根据错误原因，修改 Benchmark 代码或被测模块代码，以解决错误。
### 步骤#5：**返回最终代码**
**目标**：在修复错误后，将最终的 Benchmark 代码或被测模块代码返回给用户，这取决于问题的根本原因。
最终代码应该是完整的代码文件内容，不要省略任何部分，遵守以下格式:
```rust
// filepath: 文件路径（相对于项目根目录，不允许省略 "filepath:" 前缀）
全部代码
```